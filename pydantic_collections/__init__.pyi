from typing import TypeVar, MutableSequence, Optional, List, Union, overload, Any

from pydantic import BaseModel, ConfigDict

PYDANTIC_V2: bool
__version__: str

class CollectionModelConfig(ConfigDict):
    validate_assignment_strict: bool

T = TypeVar('T')

class BaseCollectionModel(MutableSequence[T], BaseModel):
    def __init__(self, data: Optional[List[Union[T, dict]]] = None): ...
    def insert(self, index: int, value: Union[T, dict]) -> None: ...
    def append(self, value: Union[T, dict]) -> None: ...
    def sort(self, key: Any, reverse: bool = False): ...
    @overload
    def __getitem__(self, index: int) -> T: ...
    @overload
    def __getitem__(self, index: slice) -> 'BaseCollectionModel[T]': ...
    @overload
    def __setitem__(self, index: int, value: Union[T, dict]) -> None: ...
    @overload
    def __delitem__(self, index: int) -> None: ...
    @overload
    def __delitem__(self, index: slice) -> None: ...
    def __len__(self) -> int: ...
